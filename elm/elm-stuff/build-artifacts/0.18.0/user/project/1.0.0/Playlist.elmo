var _user$project$Playlist$upcoming = function (_p0) {
	var _p1 = _p0;
	return A2(
		_elm_lang$core$List$drop,
		_p1._0.position + 1,
		A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (index, item) {
					return {ctor: '_Tuple2', _0: index, _1: item};
				}),
			_elm_lang$core$Array$toList(_p1._0.items)));
};
var _user$project$Playlist$items = function (_p2) {
	var _p3 = _p2;
	return _elm_lang$core$Array$toList(_p3._0.items);
};
var _user$project$Playlist$currentItem = function (_p4) {
	var _p5 = _p4;
	return A2(_elm_lang$core$Array$get, _p5._0.position, _p5._0.items);
};
var _user$project$Playlist$Playlist = function (a) {
	return {ctor: 'Playlist', _0: a};
};
var _user$project$Playlist$empty = _user$project$Playlist$Playlist(
	{items: _elm_lang$core$Array$empty, position: 0});
var _user$project$Playlist$append = F2(
	function (newItems, _p6) {
		var _p7 = _p6;
		return _user$project$Playlist$Playlist(
			{
				items: A2(
					_elm_lang$core$Array$append,
					_p7._0.items,
					_elm_lang$core$Array$fromList(newItems)),
				position: _p7._0.position
			});
	});
var _user$project$Playlist$prepend = F2(
	function (item, _p8) {
		var _p9 = _p8;
		return _user$project$Playlist$Playlist(
			{
				items: A2(
					_elm_lang$core$Array$append,
					_elm_lang$core$Array$fromList(
						{
							ctor: '::',
							_0: item,
							_1: {ctor: '[]'}
						}),
					_p9._0.items),
				position: _p9._0.position + 1
			});
	});
var _user$project$Playlist$remove = F2(
	function (item, playlist) {
		var current = _user$project$Playlist$currentItem(playlist);
		var _p10 = playlist;
		var items = _p10._0.items;
		var position = _p10._0.position;
		var matchCountBeforePosition = _elm_lang$core$Array$length(
			A2(
				_elm_lang$core$Array$filter,
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.eq(x, y);
					})(item),
				A3(_elm_lang$core$Array$slice, 0, position, items)));
		return _user$project$Playlist$Playlist(
			{
				items: A2(
					_elm_lang$core$Array$filter,
					F2(
						function (x, y) {
							return !_elm_lang$core$Native_Utils.eq(x, y);
						})(item),
					items),
				position: position - matchCountBeforePosition
			});
	});
var _user$project$Playlist$next = function (_p11) {
	var _p12 = _p11;
	return _user$project$Playlist$Playlist(
		{items: _p12._0.items, position: _p12._0.position + 1});
};
var _user$project$Playlist$select = F2(
	function (newPosition, _p13) {
		var _p14 = _p13;
		return _user$project$Playlist$Playlist(
			{items: _p14._0.items, position: newPosition});
	});

var _user$project$PlayerEngine$playSoundcloudTrack = _elm_lang$core$Native_Platform.outgoingPort(
	'playSoundcloudTrack',
	function (v) {
		return {id: v.id, streamUrl: v.streamUrl, currentTime: v.currentTime};
	});
var _user$project$PlayerEngine$playYoutubeTrack = _elm_lang$core$Native_Platform.outgoingPort(
	'playYoutubeTrack',
	function (v) {
		return {id: v.id, youtubeId: v.youtubeId, currentTime: v.currentTime};
	});
var _user$project$PlayerEngine$play = function (track) {
	var _p0 = track.streamingInfo;
	if (_p0.ctor === 'Soundcloud') {
		return _user$project$PlayerEngine$playSoundcloudTrack(
			{id: track.id, streamUrl: _p0._0, currentTime: track.currentTime});
	} else {
		return _user$project$PlayerEngine$playYoutubeTrack(
			{id: track.id, youtubeId: _p0._0, currentTime: track.currentTime});
	}
};
var _user$project$PlayerEngine$pause = _elm_lang$core$Native_Platform.outgoingPort(
	'pause',
	function (v) {
		return (v.ctor === 'Nothing') ? null : v._0;
	});
var _user$project$PlayerEngine$changeSoundcloudCurrentTime = _elm_lang$core$Native_Platform.outgoingPort(
	'changeSoundcloudCurrentTime',
	function (v) {
		return v;
	});
var _user$project$PlayerEngine$changeYoutubeCurrentTime = _elm_lang$core$Native_Platform.outgoingPort(
	'changeYoutubeCurrentTime',
	function (v) {
		return v;
	});
var _user$project$PlayerEngine$changeCurrentTime = F2(
	function (currentTrack, amount) {
		var _p1 = currentTrack;
		if (_p1.ctor === 'Nothing') {
			return _elm_lang$core$Platform_Cmd$none;
		} else {
			var _p2 = _p1._0.streamingInfo;
			if (_p2.ctor === 'Soundcloud') {
				return _user$project$PlayerEngine$changeSoundcloudCurrentTime(amount);
			} else {
				return _user$project$PlayerEngine$changeYoutubeCurrentTime(amount);
			}
		}
	});
var _user$project$PlayerEngine$seekSoundcloudToPercentage = _elm_lang$core$Native_Platform.outgoingPort(
	'seekSoundcloudToPercentage',
	function (v) {
		return v;
	});
var _user$project$PlayerEngine$seekYoutubeToPercentage = _elm_lang$core$Native_Platform.outgoingPort(
	'seekYoutubeToPercentage',
	function (v) {
		return v;
	});
var _user$project$PlayerEngine$seekToPercentage = F2(
	function (currentTrack, positionInPercentage) {
		var _p3 = currentTrack;
		if (_p3.ctor === 'Nothing') {
			return _elm_lang$core$Platform_Cmd$none;
		} else {
			var _p4 = _p3._0.streamingInfo;
			if (_p4.ctor === 'Soundcloud') {
				return _user$project$PlayerEngine$seekSoundcloudToPercentage(positionInPercentage);
			} else {
				return _user$project$PlayerEngine$seekYoutubeToPercentage(positionInPercentage);
			}
		}
	});
var _user$project$PlayerEngine$trackProgress = _elm_lang$core$Native_Platform.incomingPort(
	'trackProgress',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (x0) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (x1) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (x2) {
							return _elm_lang$core$Json_Decode$succeed(
								{ctor: '_Tuple3', _0: x0, _1: x1, _2: x2});
						},
						A2(_elm_lang$core$Json_Decode$index, 2, _elm_lang$core$Json_Decode$float));
				},
				A2(_elm_lang$core$Json_Decode$index, 1, _elm_lang$core$Json_Decode$float));
		},
		A2(_elm_lang$core$Json_Decode$index, 0, _elm_lang$core$Json_Decode$string)));
var _user$project$PlayerEngine$trackEnd = _elm_lang$core$Native_Platform.incomingPort('trackEnd', _elm_lang$core$Json_Decode$string);
var _user$project$PlayerEngine$trackError = _elm_lang$core$Native_Platform.incomingPort('trackError', _elm_lang$core$Json_Decode$string);
